--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -7761,3 +7761,3 @@ cache_cf.o: cf_parser.cci
 cf_gen$(EXEEXT): $(cf_gen_SOURCES) $(cf_gen_DEPENDENCIES) cf_gen_defines.cci
-	$(BUILDCXX) $(BUILDCXXFLAGS) -o $@ $(srcdir)/cf_gen.cc -I$(srcdir) -I$(top_builddir)/include/ -I$(top_builddir)/src
+	g++ -o $@ $(srcdir)/cf_gen.cc -I$(srcdir) -I$(top_builddir)/include/ -I$(top_builddir)/src
 
--- a/acinclude/lib-checks.m4
+++ b/acinclude/lib-checks.m4
@@ -100,6 +100,8 @@
 AC_DEFUN([SQUID_CHECK_OPENSSL_GETCERTIFICATE_WORKS],[
   AH_TEMPLATE(SQUID_SSLGETCERTIFICATE_BUGGY, "Define to 1 if the SSL_get_certificate crashes squid")
   AH_TEMPLATE(SQUID_USE_SSLGETCERTIFICATE_HACK, "Define to 1 to use squid workaround for SSL_get_certificate")
+  if test "$cross_compiling" = no; then
+
   SQUID_STATE_SAVE(check_SSL_get_certificate)
   LIBS="$SSLLIB $LIBS"
   if test "x$SSLLIBDIR" != "x"; then
@@ -157,6 +159,10 @@
 [])
 
 SQUID_STATE_ROLLBACK(check_SSL_get_certificate)
+  else
+    AC_DEFINE(SQUID_SSLGETCERTIFICATE_BUGGY, 0)
+    AC_DEFINE(SQUID_USE_SSLGETCERTIFICATE_HACK, 0)
+  fi
 ])
 
 dnl Checks whether the  SSL_CTX_new and similar functions require 
--- a/configure.ac
+++ b/configure.ac
@@ -452,6 +452,7 @@
 	squid_cv_gnu_atomics=yes
 ],[
 	squid_cv_gnu_atomics=no
+],[
 ])
 ])
 SQUID_DEFINE_BOOL(HAVE_ATOMIC_OPS,${squid_cv_gnu_atomics:=yes},[Define to 1 if you have GCC __sync_add_and_fetch() and such])
